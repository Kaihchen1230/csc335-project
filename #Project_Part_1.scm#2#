#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1450 0 24 29 1 #"\n"
0 0 17 3 73
(4
 #";; Towards a Scheme Interpreter for the Lambda Calculus -- Part 1: S"
 #"yntax"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; 5 points"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(5
 #";; Due December 1, and pre-requisite for all subsequent parts of the"
 #" project"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(6
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(7
 #";; All programming is to be carried out using the pure functional su"
 #"blanguage of R5RS Scheme."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95 6 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(8
 #";; You might want to have a look at http://www.cs.unc.edu/~stotts/72"
 #"3/Lambda/overview.html"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95 6 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(9
 #";; 1. The lambda calculus is a particularly simple programming langu"
 #"age consisting only of"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(10
 #";; variable references, lambda expressions with a single formal para"
 #"meter, and function"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";; applications.  A BNF definition of lambda calculus expressions is"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(11
 #";; <expr> ::= <variable> | (lambda ( <variable> ) <expr> )  |  ( <ex"
 #"pr> <expr> )"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(12
 #";; Design a data type for the lambda calculus, with constructors, se"
 #"lectors, and classifiers."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(13
 #";; For concrete representation, use Scheme, as follows:  an identifi"
 #"er should be represented as"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(14
 #";; a quoted Scheme variable, a lambda expression (lambda (x) E) as t"
 #"he quoted 3-element list"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(15
 #";; '(lambda (x) [list representing E]), and an application  (E1 E2) "
 #"as the quoted 2-element list"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";; '([list representing E1]  [list representing E2])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; constructor"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; lambda"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 24 3 1 #" "
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"variable"
0 0 24 3 3 #")  "
0 0 14 3 4 #"expr"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; list of expr"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-expr"
0 0 24 3 1 #" "
0 0 14 3 6 #"expr-1"
0 0 24 3 1 #" "
0 0 14 3 6 #"expr-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"expr-1"
0 0 24 3 1 #" "
0 0 14 3 6 #"expr-2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; test for the constructor"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"test-lambda-ex1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 19 3 26 #"\"this is test-lambda-ex1:\""
0 0 24 29 1 #"\n"
0 0 14 3 15 #"test-lambda-ex1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"test-expr-ex1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 19 3 24 #"\"this is test-expr-ex1:\""
0 0 24 29 1 #"\n"
0 0 14 3 13 #"test-expr-ex1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"test-make-expr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 19 3 24 #"\"this is test-make-expr\""
0 0 24 29 1 #"\n"
0 0 14 3 14 #"test-make-expr"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; selectors"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lambda-symbol"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-variable"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; selectors for list of two E -> (E` E``)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expr-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expr-2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";test case"
0 0 24 29 1 #"\n"
0 0 19 3 62
#"\"selector -> lambda-body for test-lambda-ex1 = (lambda (x) a)\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #" "
0 0 14 3 15 #"test-lambda-ex1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; classifiers"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #")("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lambda-symbol"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 15 3 6 #"lambda"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"lambda-body?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lambda-symbol"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 15 3 6 #"lambda"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; test case"
0 0 24 29 1 #"\n"
0 0 19 3 67
(16
 #"\"clasifiers -> lambda-symbol? for"
 #" test-lambda-ex1 = (lambda (x) a)\""
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"lambda-symbol?"
0 0 24 3 1 #" "
0 0 14 3 15 #"test-lambda-ex1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(17
 #";; 2.  In (lambda (<variable>) <expr>), we say that <variable> is a "
 #"binder that"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(18
 #";; binds all occurrences of that variable in the body, <expr>, unles"
 #"s some intervening"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(19
 #";; binder of the same variable occurs. Thus in (lambda (x) (x (lambd"
 #"a (x) x))),"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(20
 #";; the first occurrence of x binds the second occurrence of x, but n"
 #"ot"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(21
 #";; the fourth.  The third occurrence of x binds the fourth occurrenc"
 #"e of x."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(22
 #";; A variable x occurs free in an expression E if there is some occu"
 #"rrence of x which is not"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(23
 #";; bound by any binder of x in E.  A variable x occurs bound in an e"
 #"xpression E if it is"
) 0 0 24 29 1 #"\n"
0 0 17 3 90
(24
 #";; not free in E.  Thus x occurs free in (lambda (y) x), bound in (l"
 #"ambda (x) x), and both"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";; free and bound in (lambda (y) (x (lambda (x) x)))."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(25
 #";; As a consequence of this definition, we can say that a variable x"
 #" occurs free in a"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";; lambda calculus expression E iff one of the following holds:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;   (i) E = x"
0 0 24 29 1 #"\n"
0 0 17 3 81
(26
 #";;   (ii) E = (lambda (y) E'), where x is distinct from y and x occu"
 #"rs free in E'"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(27
 #";;   (iii) E = (E' E'') and x occurs free in E' or x occurs free in "
 #"E''"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(28
 #";; Observe that this is an inductive definition, exploiting the stru"
 #"cture of lambda calculus"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";; expressions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(29
 #";; Similarly, a variable x occurs bound in a lambda calculus express"
 #"ion E iff one of the"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";; following holds:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;   (i) E = (lambda (x) E') and x occurs free in E'"
0 0 24 29 1 #"\n"
0 0 17 3 93
(30
 #";;   (ii) E = (lambda (y) E'), and x occurs bound in E': here, y may"
 #" be x, or distinct from x"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";;   (iii) E = (E1 E2) and x occurs bound in either E1 or E2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 100
(31
 #";; Develop and prove correct a procedure free-vars that inputs a lis"
 #"t representing a lambda calculus"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(32
 #";; expression E and outputs a list without repetitions (that is, a s"
 #"et) of the variables occurring"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";; free in E."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; ITERATIVE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; SPEC"
0 0 24 29 1 #"\n"
0 0 17 3 116
(33
 #";   pre: E -> a list representing a lambda calclus expression. ex: ("
 #"lambda (y) x) or (lambda (x) (x (lambda (x) x)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";   post: result -> a list of unique free variables from the input E"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; CODE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; helper function"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; SPEC for remove-duplicates"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";   pre: l -> a list"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";   post: result -> a list of unique elements from the input l"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 14 #"element-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 14 #"element-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 14 #"element-so-far"
0 0 24 3 3 #") ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 14 #"element-so-far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 3 #";(("
0 0 17 3 6 #"member"
0 0 17 3 2 #" ("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 3 #") ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 4 #")) ("
0 0 17 3 6 #"helper"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 21 #"lst) element-so-far))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 14 #"element-so-far"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; TEST"
0 0 24 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 17 #"remove-duplicates"
0 0 19 3 1 #" "
0 0 19 3 1 #"`"
0 0 19 3 1 #"("
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 1 #"b"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 1 #"b"
0 0 19 3 1 #" "
0 0 19 3 3 #"c)\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 3 #"() "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; GUESS-INVATIANT TEST/PROOF for remove-duplicates"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Guess-invariant: lst-all-unique-elements ="
0 0 17 3 89
(34
 #" (car lst) + lst-result + remove-duplicates(lst-remaining) if (car l"
 #"st) not in lst-result"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";                  in the program: lst-result = element-so-far"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Strong-enough?:"
0 0 24 29 1 #"\n"
0 0 17 3 120
(35
 #"; When the program halts, we reaches to the end of the l -> `(), mea"
 #"ning the program went throught all the elements in l"
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #"; and add"
0 0 17 3 1 #" "
0 0 17 3 3 #"all"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 35 #" unique elements to the lst-result."
0 0 24 29 1 #"\n"
0 0 17 3 120
(36
 #"; GI: lst-all-unique-elements = (car lst) + lst-result + remove-dupl"
 #"icates(lst-remaining) if (car lst) not in lst-result"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #"; ->"
0 0 24 29 1 #"\n"
0 0 17 3 156
(37
 #"; lst-all-unique-elements = (car lst) + lst-result + remove-duplicat"
 #"es(None), since every list in scheme ended with `(), so `() won't be"
 #" added to lst-result"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; -> lst-all-unique-elements = lst-result"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Weak-enough?:"
0 0 24 29 1 #"\n"
0 0 17 3 80
(38
 #"; In the first call we make to helper, the element-so-far = `() -> a"
 #"n empty list"
) 0 0 24 29 1 #"\n"
0 0 17 3 144
(39
 #"; and list-remaining is still l, the program hasn't processed any el"
 #"ement yet. So, (car lst) is nothing, because the project hasn't star"
 #"ted yet."
) 0 0 24 29 1 #"\n"
0 0 17 3 120 36 0 0 24 29 1 #"\n"
0 0 17 3 4 #"; ->"
0 0 24 29 1 #"\n"
0 0 17 3 73
(40
 #"; lst-all-unique-elements = None + `() + remove-duplicates(lst-remai"
 #"ning)"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#"; lst-all-unique-elements = remove-duplicates(lst-remaining)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; = remove-duplicates(lst-remaining)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Preserved?"
0 0 24 29 1 #"\n"
0 0 17 3 104
(41
 #"; Current call: Assume that the current call works, such that it wor"
 #"ks for the k elements in the input l"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";               and lst-result"
0 0 17 3 1 #" "
0 0 17 3 6 #"stored"
0 0 17 3 4 #" all"
0 0 17 3 1 #" "
0 0 17 3 6 #"unique"
0 0 17 3 32 #" elements within the k elements."
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Next call: In the next call, we already have all the un"
0 0 17 3 1 #"i"
0 0 17 3 87
(42
 #"que elements within the k elements of l from the last call (Current "
 #"call). Now, we take"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(43
 #";            the next element through (car l) in the input l and che"
 #"ck"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";            1) if"
0 0 17 3 14 #" it is in the "
0 0 17 3 11 #"lst-result,"
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 1 #" "
0 0 17 3 7 #"nothing"
0 0 17 3 1 #" "
0 0 17 3 4 #"will"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 5 #"added"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 12 #" lst-result."
0 0 24 29 1 #"\n"
0 0 17 3 164
(44
 #";            Then we take the last element in the input l, since the"
 #" last element of every list is `(), so the lst-result is the all uni"
 #"que elements in the input l;"
) 0 0 24 29 1 #"\n"
0 0 17 3 132
(45
 #";            GI: lst-all-unique-elements =  (car lst) + lst-result +"
 #" remove-duplicates(lst-remaining) if (car lst) not in lst-result"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";            ->"
0 0 24 29 1 #"\n"
0 0 17 3 134
(46
 #";            lst-all-unique-elements =  None + lst-result + remove-d"
 #"uplicates(`()) since current element already existed in lst-result"
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #";             ->  lst-all-unique-elements = lst-result"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 90
(47
 #";           2) if it is not in the lst-result, then the it will be a"
 #"dded to the lst-result"
) 0 0 24 29 1 #"\n"
0 0 17 3 163
(48
 #";           Then we take the last element in the input l, since the "
 #"last element of every list is `(), so the lst-result is the all uniq"
 #"ue elements in the input l;"
) 0 0 24 29 1 #"\n"
0 0 17 3 131
(49
 #";           GI: lst-all-unique-elements =  (car lst) + lst-result + "
 #"remove-duplicates(lst-remaining) if (car lst) not in lst-result"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";           ->"
0 0 24 29 1 #"\n"
0 0 17 3 137
(50
 #";           lst-all-unique-elements = (car lst) + lst-result + remov"
 #"e-duplicates(`()) since current element doesn't existed in lst-resul"
 #"t"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";           ->  lst-all-unique-elements = lst-result"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 155
(51
 #"; Termination: According to the code, the program halts when the inp"
 #"ut l is empty, that is l = `(). As each call to helper function, the"
 #" amount of elements"
) 0 0 24 29 1 #"\n"
0 0 17 3 145
(52
 #";              in l decease by 1. Eventually, l would be `(). Theref"
 #"ore, assuming the pre-condition holds, the program must eventually t"
 #"erminate."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; main function for free-vars"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 14 #"lambda-symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-variable"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 12 #"lambda-body?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expr-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expr-2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 1 #"("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 3 #"() "
0 0 21 3 1 #"`"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; TEST"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; test cases given by professor"
0 0 24 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 9 #"professor"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 4 #"case"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 4 #"free"
0 0 19 3 6 #" vars:"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-exp1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"u"
0 0 24 3 3 #") ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 14 3 11 #"lambda-exp1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-exp1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 9 #"professor"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 4 #"case"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 4 #"free"
0 0 19 3 6 #" vars:"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-exp2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 5 #") ((("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"u"
0 0 24 3 3 #") ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"))("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 14 3 11 #"lambda-exp2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"free-vars"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; GUESS-INVATIANT TEST/PROOF"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Guess-invariant:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Strong-enough?:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Weak-enough?:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Preserved?"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Current call:"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Next call:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Termination:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(53
 #";; Develop and prove correct a procedure bound-vars that inputs a li"
 #"st representing a lambda calculus"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(54
 #";; expression E and outputs the set of variables which occur bound i"
 #"n E."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; ITERATIVE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; SPEC"
0 0 24 29 1 #"\n"
0 0 17 3 116 33 0 0 24 29 1 #"\n"
0 0 17 3 80
(55
 #";   post: result -> a list of unique bounded variables from the inpu"
 #"t E. ex: (x)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; CODE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; main funciton"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bounded-vars"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 37 #"; this is checking E = lambda (x) (E)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 14 #"lambda-symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-variable"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 31 #"; this is checking E = (E` E``)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 12 #"lambda-body?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expr-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expr-2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-so-far"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 1 #"("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 3 #"() "
0 0 21 3 1 #"`"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; TEST"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; test cases given by professor"
0 0 24 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 9 #"professor"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 4 #"case"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 7 #"bounded"
0 0 19 3 6 #" vars:"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 14 3 11 #"lambda-exp1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"bounded-vars"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-exp1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 9 #"professor"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 4 #"case"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 7 #"bounded"
0 0 19 3 6 #" vars:"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 14 3 11 #"lambda-exp2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"bounded-vars"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; GUESS-INVATIANT TEST/PROOF"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Guess-invariant:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Strong-enough?:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Weak-enough?:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Preserved?"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Current call:"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Next call:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Termination:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(56
 #";; 3.  Define a function all-ids which returns the set of all symbol"
 #"s -- free or bound variables,"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(57
 #";; as well as the lambda identifiers for which there are no bound oc"
 #"currences -- which occur in"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";; a lambda calculus expression E.  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; ITERATIVE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; SPEC"
0 0 24 29 1 #"\n"
0 0 17 3 116 33 0 0 24 29 1 #"\n"
0 0 17 3 110
(58
 #";   post: result -> a list of unique free variables, bounded variabl"
 #"es and lambda identifiers from the input E"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; CODE"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; main funciton"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"all-ids"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"id-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 9 #"id-so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"id-so-far"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 14 #"lambda-symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"id-so-far"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-variable"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 31 #"; this is checking E = (E` E``)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 12 #"lambda-body?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expr-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"id-so-far"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expr-2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 9 #"id-so-far"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 1 #"("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; TEST"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; test cases given by professor"
0 0 24 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 9 #"professor"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 4 #"case"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 9 #" all-ids:"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 14 3 11 #"lambda-exp1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"all-ids"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-exp1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 9 #"professor"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 4 #"case"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 9 #"all-ids:\""
0 0 24 29 1 #"\n"
0 0 14 3 11 #"lambda-exp2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"all-ids"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; GUESS-INVATIANT TEST/PROOF"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Guess-invariant:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Strong-enough?:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Weak-enough?:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Preserved?"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Current call:"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Next call:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Termination:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
